#autogenerated by sqlautocode

from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, backref

Base = declarative_base()
metadata = Base.metadata

try:
    from sqlalchemy.dialects.postgresql import *
except ImportError:
    from sqlalchemy.databases.postgres import *
    
data_file_variables = Table(u'data_file_variables', metadata,
    Column('data_file_variable_id', INTEGER(), primary_key=True, nullable=False),
    Column('data_file_id', INTEGER(), ForeignKey('data_files.data_file_id'), nullable=False),
    Column('variable_alias_id', INTEGER(), ForeignKey('variable_aliases.variable_alias_id'), nullable=False),
    Column('derivation_method', VARCHAR(length=255)),
    Column('variable_cell_methods', VARCHAR(length=255)),
    Column('level_set_id', INTEGER(), ForeignKey('level_sets.level_set_id')),
    Column('grid_id', INTEGER(), ForeignKey('grids.grid_id'), nullable=False),
    Column('netcdf_variable_name', VARCHAR(length=32), nullable=False),
    Column('disabled', BOOLEAN()),
    Column('range_min', REAL(), nullable=False),
    Column('range_max', REAL(), nullable=False),
)

data_file_variables_qc_flags = Table(u'data_file_variables_qc_flags', metadata,
    Column('data_file_variable_id', INTEGER(), ForeignKey('data_file_variables.data_file_variable_id'), primary_key=True, nullable=False),
    Column('qc_flag_id', INTEGER(), ForeignKey('qc_flags.qc_flag_id'), primary_key=True, nullable=False),
)

data_files = Table(u'data_files', metadata,
    Column('data_file_id', INTEGER(), primary_key=True, nullable=False),
    Column('filename', VARCHAR(length=2048), nullable=False),
    Column('run_id', INTEGER(), ForeignKey('runs.run_id')),
    Column('first_1mib_md5sum', CHAR(length=32), nullable=False),
    Column('unique_id', VARCHAR(length=255), nullable=False),
    Column('time_set_id', INTEGER(), ForeignKey('time_sets.time_set_id')),
    Column('x_dim_name', VARCHAR(length=32), nullable=False),
    Column('y_dim_name', VARCHAR(length=32), nullable=False),
    Column('z_dim_name', VARCHAR(length=32)),
    Column('t_dim_name', VARCHAR(length=32)),
    Column('index_time', TIMESTAMP(), nullable=False),
)

ensemble_data_file_variables = Table(u'ensemble_data_file_variables', metadata,
    Column('ensemble_id', INTEGER(), ForeignKey('ensembles.ensemble_id'), primary_key=True, nullable=False),
    Column('data_file_variable_id', INTEGER(), ForeignKey('data_file_variables.data_file_variable_id'), primary_key=True, nullable=False),
)

runs = Table(u'runs', metadata,
    Column('run_id', INTEGER(), primary_key=True, nullable=False),
    Column('run_name', VARCHAR(length=32), nullable=False),
    Column('model_id', INTEGER(), ForeignKey('models.model_id'), nullable=False),
    Column('emission_id', INTEGER(), ForeignKey('emissions.emission_id'), nullable=False),
    Column('driving_run', INTEGER(), ForeignKey('runs.run_id')),
    Column('initialized_from', INTEGER(), ForeignKey('runs.run_id')),
    Column('project', VARCHAR(length=64)),
)

class ClimatologicalTime(Base):
    __tablename__ = 'climatological_times'

    __table_args__ = {}

    #column definitions
    time_end = Column('time_end', TIMESTAMP(), nullable=False)
    time_idx = Column('time_idx', INTEGER(), primary_key=True, nullable=False)
    time_set_id = Column('time_set_id', INTEGER(), ForeignKey('time_sets.time_set_id'), primary_key=True, nullable=False)
    time_start = Column('time_start', TIMESTAMP(), nullable=False)

    #relation definitions


class DataFile(Base):
    __table__ = data_files


    #relation definitions
    data_file_variables = relationship("DataFileVariable", backref=backref('file'))


class DataFileVariable(Base):
    __table__ = data_file_variables


    #relation definitions


class Emission(Base):
    __tablename__ = 'emissions'

    __table_args__ = {}

    #column definitions
    emission_id = Column('emission_id', INTEGER(), primary_key=True, nullable=False)
    emission_long_name = Column('emission_long_name', VARCHAR(length=255))
    emission_short_name = Column('emission_short_name', VARCHAR(length=255), nullable=False)

    #relation definitions


class Ensemble(Base):
    __tablename__ = 'ensembles'

    __table_args__ = {}

    #column definitions
    changes = Column('changes', TEXT(), nullable=False)
    ensemble_description = Column('ensemble_description', VARCHAR(length=255))
    ensemble_id = Column('ensemble_id', INTEGER(), primary_key=True, nullable=False)
    ensemble_name = Column('ensemble_name', VARCHAR(length=32), nullable=False)
    version = Column('version', REAL(), nullable=False)

    #relation definitions


class Grid(Base):
    __tablename__ = 'grids'

    __table_args__ = {}

    #column definitions
    cell_avg_area_sq_km = Column('cell_avg_area_sq_km', REAL())
    evenly_spaced_y = Column('evenly_spaced_y', BOOLEAN(), nullable=False)
    grid_id = Column('grid_id', INTEGER(), primary_key=True, nullable=False)
    grid_name = Column('grid_name', VARCHAR(length=255))
    srid = Column('srid', INTEGER(), ForeignKey('spatial_ref_sys.srid'))
    xc_count = Column('xc_count', INTEGER(), nullable=False)
    xc_grid_step = Column('xc_grid_step', REAL(), nullable=False)
    xc_origin = Column('xc_origin', REAL(), nullable=False)
    xc_units = Column('xc_units', VARCHAR(length=64), nullable=False)
    yc_count = Column('yc_count', INTEGER(), nullable=False)
    yc_grid_step = Column('yc_grid_step', REAL(), nullable=False)
    yc_origin = Column('yc_origin', REAL(), nullable=False)
    yc_units = Column('yc_units', VARCHAR(length=64), nullable=False)

    #relation definitions


class Level(Base):
    __tablename__ = 'levels'

    __table_args__ = {}

    #column definitions
    level_end = Column('level_end', REAL())
    level_idx = Column('level_idx', INTEGER(), primary_key=True, nullable=False)
    level_set_id = Column('level_set_id', INTEGER(), ForeignKey('level_sets.level_set_id'), primary_key=True, nullable=False)
    level_start = Column('level_start', REAL())
    vertical_level = Column('vertical_level', REAL(), nullable=False)

    #relation definitions


class LevelSet(Base):
    __tablename__ = 'level_sets'

    __table_args__ = {}

    #column definitions
    level_set_id = Column('level_set_id', INTEGER(), primary_key=True, nullable=False)
    level_units = Column('level_units', VARCHAR(length=32), nullable=False)

    #relation definitions


class Model(Base):
    __tablename__ = 'models'

    __table_args__ = {}

    #column definitions
    model_id = Column('model_id', INTEGER(), primary_key=True, nullable=False)
    model_long_name = Column('model_long_name', VARCHAR(length=255))
    model_organization = Column('model_organization', VARCHAR(length=64))
    model_short_name = Column('model_short_name', VARCHAR(length=32), nullable=False)
    type = Column('type', VARCHAR(length=32), nullable=False)

    #relation definitions


class QcFlag(Base):
    __tablename__ = 'qc_flags'

    __table_args__ = {}

    #column definitions
    qc_flag_description = Column('qc_flag_description', VARCHAR(length=2048))
    qc_flag_id = Column('qc_flag_id', INTEGER(), primary_key=True, nullable=False)
    qc_flag_name = Column('qc_flag_name', VARCHAR(length=32), nullable=False)

    #relation definitions


class Run(Base):
    __table__ = runs


    #relation definitions


class SpatialRefSy(Base):
    __tablename__ = 'spatial_ref_sys'

    __table_args__ = {}

    #column definitions
    auth_name = Column('auth_name', VARCHAR(length=256))
    auth_srid = Column('auth_srid', INTEGER())
    proj4text = Column('proj4text', VARCHAR(length=2048))
    srid = Column('srid', INTEGER(), primary_key=True, nullable=False)
    srtext = Column('srtext', VARCHAR(length=2048))

    #relation definitions


class Time(Base):
    __tablename__ = 'times'

    __table_args__ = {}

    #column definitions
    time_idx = Column('time_idx', INTEGER(), nullable=False)
    time_set_id = Column('time_set_id', INTEGER(), ForeignKey('time_sets.time_set_id'), primary_key=True, nullable=False)
    timestep = Column('timestep', TIMESTAMP(), primary_key=True, nullable=False)

    #relation definitions


class TimeSet(Base):
    __tablename__ = 'time_sets'

    __table_args__ = {}

    #column definitions
    calendar = Column('calendar', VARCHAR(length=32), nullable=False)
    end_date = Column('end_date', TIMESTAMP(), nullable=False)
    multi_year_mean = Column('multi_year_mean', BOOLEAN(), nullable=False)
    num_times = Column('num_times', INTEGER(), nullable=False)
    start_date = Column('start_date', TIMESTAMP(), nullable=False)
    time_resolution = Column('time_resolution', ENUM(u'1-minute', u'2-minute', u'5-minute', u'15-minute', u'30-minute', u'1-hourly', u'3-hourly', u'6-hourly', u'12-hourly', u'daily', u'monthly', u'yearly', u'other', u'irregular', name='timescale'), nullable=False)
    time_set_id = Column('time_set_id', INTEGER(), primary_key=True, nullable=False)

    #relation definitions


class Variable(Base):
    __tablename__ = 'variables'

    __table_args__ = {}

    #column definitions
    variable_alias_id = Column('variable_alias_id', INTEGER(), ForeignKey('variable_aliases.variable_alias_id'), nullable=False)
    variable_description = Column('variable_description', VARCHAR(length=255), nullable=False)
    variable_id = Column('variable_id', INTEGER(), primary_key=True, nullable=False)
    variable_name = Column('variable_name', VARCHAR(length=64), nullable=False)

    #relation definitions


class VariableAlias(Base):
    __tablename__ = 'variable_aliases'

    __table_args__ = {}

    #column definitions
    variable_alias_id = Column('variable_alias_id', INTEGER(), primary_key=True, nullable=False)
    variable_long_name = Column('variable_long_name', VARCHAR(length=255), nullable=False)
    variable_standard_name = Column('variable_standard_name', VARCHAR(length=64), nullable=False)
    variable_units = Column('variable_units', VARCHAR(length=32), nullable=False)

    #relation definitions


class YCellBound(Base):
    __tablename__ = 'y_cell_bounds'

    __table_args__ = {}

    #column definitions
    bottom_bnd = Column('bottom_bnd', REAL())
    grid_id = Column('grid_id', INTEGER(), ForeignKey('grids.grid_id'), primary_key=True, nullable=False)
    top_bnd = Column('top_bnd', REAL())
    y_center = Column('y_center', REAL(), primary_key=True, nullable=False)

    #relation definitions
