#autogenerated by sqlautocode

from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relation

engine = create_engine('postgresql://pcic_meta@monsoon.pcic/pcic_meta_copy')
DeclarativeBase = declarative_base()
metadata = DeclarativeBase.metadata
metadata.bind = engine

try:
    from sqlalchemy.dialects.postgresql import *
except ImportError:
    from sqlalchemy.databases.postgres import *
data_file_variables = Table(u'data_file_variables', metadata,
    Column(u'data_file_variable_id', INTEGER(), primary_key=True, nullable=False),
    Column(u'data_file_id', INTEGER(), ForeignKey('data_files.data_file_id'), nullable=False),
    Column(u'variable_alias_id', INTEGER(), ForeignKey('variable_aliases.variable_alias_id'), nullable=False),
    Column(u'derivation_method', VARCHAR(length=255)),
    Column(u'variable_cell_methods', VARCHAR(length=255)),
    Column(u'level_set_id', INTEGER(), ForeignKey('level_sets.level_set_id')),
    Column(u'grid_id', INTEGER(), ForeignKey('grids.grid_id'), nullable=False),
    Column(u'netcdf_variable_name', VARCHAR(length=32), nullable=False),
    Column(u'disabled', BOOLEAN()),
    Column(u'range_min', REAL(), nullable=False),
    Column(u'range_max', REAL(), nullable=False),
)

data_file_variables_qc_flags = Table(u'data_file_variables_qc_flags', metadata,
    Column(u'data_file_variable_id', INTEGER(), ForeignKey('data_file_variables.data_file_variable_id'), primary_key=True, nullable=False),
    Column(u'qc_flag_id', INTEGER(), ForeignKey('qc_flags.qc_flag_id'), primary_key=True, nullable=False),
)

data_files = Table(u'data_files', metadata,
    Column(u'data_file_id', INTEGER(), primary_key=True, nullable=False),
    Column(u'filename', VARCHAR(length=2048), nullable=False),
    Column(u'run_id', INTEGER(), ForeignKey('runs.run_id')),
    Column(u'first_1mib_md5sum', CHAR(length=32), nullable=False),
    Column(u'unique_id', VARCHAR(length=255), nullable=False),
    Column(u'time_set_id', INTEGER(), ForeignKey('time_sets.time_set_id')),
    Column(u'x_dim_name', VARCHAR(length=32), nullable=False),
    Column(u'y_dim_name', VARCHAR(length=32), nullable=False),
    Column(u'z_dim_name', VARCHAR(length=32)),
    Column(u't_dim_name', VARCHAR(length=32)),
    Column(u'index_time', TIMESTAMP(), nullable=False),
)

ensemble_data_file_variables = Table(u'ensemble_data_file_variables', metadata,
    Column(u'ensemble_id', INTEGER(), ForeignKey('ensembles.ensemble_id'), primary_key=True, nullable=False),
    Column(u'data_file_variable_id', INTEGER(), ForeignKey('data_file_variables.data_file_variable_id'), primary_key=True, nullable=False),
)

runs = Table(u'runs', metadata,
    Column(u'run_id', INTEGER(), primary_key=True, nullable=False),
    Column(u'run_name', VARCHAR(length=32), nullable=False),
    Column(u'model_id', INTEGER(), ForeignKey('models.model_id'), nullable=False),
    Column(u'emission_id', INTEGER(), ForeignKey('emissions.emission_id'), nullable=False),
    Column(u'driving_run', INTEGER(), ForeignKey('runs.run_id')),
    Column(u'initialized_from', INTEGER(), ForeignKey('runs.run_id')),
    Column(u'project', VARCHAR(length=64)),
)

class ClimatologicalTime(DeclarativeBase):
    __tablename__ = 'climatological_times'

    __table_args__ = {}

    #column definitions
    time_end = Column(u'time_end', TIMESTAMP(), nullable=False)
    time_idx = Column(u'time_idx', INTEGER(), primary_key=True, nullable=False)
    time_set_id = Column(u'time_set_id', INTEGER(), ForeignKey('time_sets.time_set_id'), primary_key=True, nullable=False)
    time_start = Column(u'time_start', TIMESTAMP(), nullable=False)

    #relation definitions
    time_sets = relation('TimeSet', primaryjoin='ClimatologicalTime.time_set_id==TimeSet.time_set_id')


class DataFile(DeclarativeBase):
    __table__ = data_files


    #relation definitions
    runs = relation('Run', primaryjoin='DataFile.run_id==Run.run_id')
    time_sets = relation('TimeSet', primaryjoin='DataFile.time_set_id==TimeSet.time_set_id')
    variable_aliases = relation('VariableAlias', primaryjoin='DataFile.data_file_id==DataFileVariable.data_file_id', secondary=data_file_variables, secondaryjoin='DataFileVariable.variable_alias_id==VariableAlias.variable_alias_id')


class DataFileVariable(DeclarativeBase):
    __table__ = data_file_variables


    #relation definitions
    level_sets = relation('LevelSet', primaryjoin='DataFileVariable.level_set_id==LevelSet.level_set_id')
    variable_aliases = relation('VariableAlias', primaryjoin='DataFileVariable.variable_alias_id==VariableAlias.variable_alias_id')
    grids = relation('Grid', primaryjoin='DataFileVariable.grid_id==Grid.grid_id')
    data_files = relation('DataFile', primaryjoin='DataFileVariable.data_file_id==DataFile.data_file_id')
    qc_flags = relation('QcFlag', primaryjoin='DataFileVariable.data_file_variable_id==data_file_variables_qc_flags.c.data_file_variable_id', secondary=data_file_variables_qc_flags, secondaryjoin='data_file_variables_qc_flags.c.qc_flag_id==QcFlag.qc_flag_id')
    ensembles = relation('Ensemble', primaryjoin='DataFileVariable.data_file_variable_id==ensemble_data_file_variables.c.data_file_variable_id', secondary=ensemble_data_file_variables, secondaryjoin='ensemble_data_file_variables.c.ensemble_id==Ensemble.ensemble_id')


class Emission(DeclarativeBase):
    __tablename__ = 'emissions'

    __table_args__ = {}

    #column definitions
    emission_id = Column(u'emission_id', INTEGER(), primary_key=True, nullable=False)
    emission_long_name = Column(u'emission_long_name', VARCHAR(length=255))
    emission_short_name = Column(u'emission_short_name', VARCHAR(length=255), nullable=False)

    #relation definitions
    models = relation('Model', primaryjoin='Emission.emission_id==Run.emission_id', secondary=runs, secondaryjoin='Run.model_id==Model.model_id')


class Ensemble(DeclarativeBase):
    __tablename__ = 'ensembles'

    __table_args__ = {}

    #column definitions
    changes = Column(u'changes', TEXT(), nullable=False)
    ensemble_description = Column(u'ensemble_description', VARCHAR(length=255))
    ensemble_id = Column(u'ensemble_id', INTEGER(), primary_key=True, nullable=False)
    ensemble_name = Column(u'ensemble_name', VARCHAR(length=32), nullable=False)
    version = Column(u'version', REAL(), nullable=False)

    #relation definitions
    data_file_variables = relation('DataFileVariable', primaryjoin='Ensemble.ensemble_id==ensemble_data_file_variables.c.ensemble_id', secondary=ensemble_data_file_variables, secondaryjoin='ensemble_data_file_variables.c.data_file_variable_id==DataFileVariable.data_file_variable_id')


class Grid(DeclarativeBase):
    __tablename__ = 'grids'

    __table_args__ = {}

    #column definitions
    cell_avg_area_sq_km = Column(u'cell_avg_area_sq_km', REAL())
    evenly_spaced_y = Column(u'evenly_spaced_y', BOOLEAN(), nullable=False)
    grid_id = Column(u'grid_id', INTEGER(), primary_key=True, nullable=False)
    grid_name = Column(u'grid_name', VARCHAR(length=255))
    srid = Column(u'srid', INTEGER(), ForeignKey('spatial_ref_sys.srid'))
    xc_count = Column(u'xc_count', INTEGER(), nullable=False)
    xc_grid_step = Column(u'xc_grid_step', REAL(), nullable=False)
    xc_origin = Column(u'xc_origin', REAL(), nullable=False)
    xc_units = Column(u'xc_units', VARCHAR(length=64), nullable=False)
    yc_count = Column(u'yc_count', INTEGER(), nullable=False)
    yc_grid_step = Column(u'yc_grid_step', REAL(), nullable=False)
    yc_origin = Column(u'yc_origin', REAL(), nullable=False)
    yc_units = Column(u'yc_units', VARCHAR(length=64), nullable=False)

    #relation definitions
    spatial_ref_sys = relation('SpatialRefSy', primaryjoin='Grid.srid==SpatialRefSy.srid')
    data_files = relation('DataFile', primaryjoin='Grid.grid_id==DataFileVariable.grid_id', secondary=data_file_variables, secondaryjoin='DataFileVariable.data_file_id==DataFile.data_file_id')


class Level(DeclarativeBase):
    __tablename__ = 'levels'

    __table_args__ = {}

    #column definitions
    level_end = Column(u'level_end', REAL())
    level_idx = Column(u'level_idx', INTEGER(), primary_key=True, nullable=False)
    level_set_id = Column(u'level_set_id', INTEGER(), ForeignKey('level_sets.level_set_id'), primary_key=True, nullable=False)
    level_start = Column(u'level_start', REAL())
    vertical_level = Column(u'vertical_level', REAL(), nullable=False)

    #relation definitions
    level_sets = relation('LevelSet', primaryjoin='Level.level_set_id==LevelSet.level_set_id')


class LevelSet(DeclarativeBase):
    __tablename__ = 'level_sets'

    __table_args__ = {}

    #column definitions
    level_set_id = Column(u'level_set_id', INTEGER(), primary_key=True, nullable=False)
    level_units = Column(u'level_units', VARCHAR(length=32), nullable=False)

    #relation definitions
    data_files = relation('DataFile', primaryjoin='LevelSet.level_set_id==DataFileVariable.level_set_id', secondary=data_file_variables, secondaryjoin='DataFileVariable.data_file_id==DataFile.data_file_id')


class Model(DeclarativeBase):
    __tablename__ = 'models'

    __table_args__ = {}

    #column definitions
    model_id = Column(u'model_id', INTEGER(), primary_key=True, nullable=False)
    model_long_name = Column(u'model_long_name', VARCHAR(length=255))
    model_organization = Column(u'model_organization', VARCHAR(length=64))
    model_short_name = Column(u'model_short_name', VARCHAR(length=32), nullable=False)
    type = Column(u'type', VARCHAR(length=32), nullable=False)

    #relation definitions
    emissions = relation('Emission', primaryjoin='Model.model_id==Run.model_id', secondary=runs, secondaryjoin='Run.emission_id==Emission.emission_id')


class QcFlag(DeclarativeBase):
    __tablename__ = 'qc_flags'

    __table_args__ = {}

    #column definitions
    qc_flag_description = Column(u'qc_flag_description', VARCHAR(length=2048))
    qc_flag_id = Column(u'qc_flag_id', INTEGER(), primary_key=True, nullable=False)
    qc_flag_name = Column(u'qc_flag_name', VARCHAR(length=32), nullable=False)

    #relation definitions
    data_file_variables = relation('DataFileVariable', primaryjoin='QcFlag.qc_flag_id==data_file_variables_qc_flags.c.qc_flag_id', secondary=data_file_variables_qc_flags, secondaryjoin='data_file_variables_qc_flags.c.data_file_variable_id==DataFileVariable.data_file_variable_id')


class Run(DeclarativeBase):
    __table__ = runs


    #relation definitions
    emissions = relation('Emission', primaryjoin='Run.emission_id==Emission.emission_id')
    models = relation('Model', primaryjoin='Run.run_id==Run.driving_run', secondary=runs, secondaryjoin='Run.model_id==Model.model_id')
    time_sets = relation('TimeSet', primaryjoin='Run.run_id==DataFile.run_id', secondary=data_files, secondaryjoin='DataFile.time_set_id==TimeSet.time_set_id')


class SpatialRefSy(DeclarativeBase):
    __tablename__ = 'spatial_ref_sys'

    __table_args__ = {}

    #column definitions
    auth_name = Column(u'auth_name', VARCHAR(length=256))
    auth_srid = Column(u'auth_srid', INTEGER())
    proj4text = Column(u'proj4text', VARCHAR(length=2048))
    srid = Column(u'srid', INTEGER(), primary_key=True, nullable=False)
    srtext = Column(u'srtext', VARCHAR(length=2048))

    #relation definitions


class Time(DeclarativeBase):
    __tablename__ = 'times'

    __table_args__ = {}

    #column definitions
    time_idx = Column(u'time_idx', INTEGER(), nullable=False)
    time_set_id = Column(u'time_set_id', INTEGER(), ForeignKey('time_sets.time_set_id'), primary_key=True, nullable=False)
    timestep = Column(u'timestep', TIMESTAMP(), primary_key=True, nullable=False)

    #relation definitions
    time_sets = relation('TimeSet', primaryjoin='Time.time_set_id==TimeSet.time_set_id')


class TimeSet(DeclarativeBase):
    __tablename__ = 'time_sets'

    __table_args__ = {}

    #column definitions
    calendar = Column(u'calendar', VARCHAR(length=32), nullable=False)
    end_date = Column(u'end_date', TIMESTAMP(), nullable=False)
    multi_year_mean = Column(u'multi_year_mean', BOOLEAN(), nullable=False)
    num_times = Column(u'num_times', INTEGER(), nullable=False)
    start_date = Column(u'start_date', TIMESTAMP(), nullable=False)
    time_resolution = Column(u'time_resolution', Enum(u'1-minute', u'2-minute', u'5-minute', u'15-minute', u'30-minute', u'1-hourly', u'3-hourly', u'6-hourly', u'12-hourly', u'daily', u'monthly', u'yearly', u'other', u'irregular', name=u'timescale'), nullable=False)
    time_set_id = Column(u'time_set_id', INTEGER(), primary_key=True, nullable=False)

    #relation definitions
    runs = relation('Run', primaryjoin='TimeSet.time_set_id==DataFile.time_set_id', secondary=data_files, secondaryjoin='DataFile.run_id==Run.run_id')


class Variable(DeclarativeBase):
    __tablename__ = 'variables'

    __table_args__ = {}

    #column definitions
    variable_alias_id = Column(u'variable_alias_id', INTEGER(), ForeignKey('variable_aliases.variable_alias_id'), nullable=False)
    variable_description = Column(u'variable_description', VARCHAR(length=255), nullable=False)
    variable_id = Column(u'variable_id', INTEGER(), primary_key=True, nullable=False)
    variable_name = Column(u'variable_name', VARCHAR(length=64), nullable=False)

    #relation definitions
    variable_aliases = relation('VariableAlias', primaryjoin='Variable.variable_alias_id==VariableAlias.variable_alias_id')


class VariableAlias(DeclarativeBase):
    __tablename__ = 'variable_aliases'

    __table_args__ = {}

    #column definitions
    variable_alias_id = Column(u'variable_alias_id', INTEGER(), primary_key=True, nullable=False)
    variable_long_name = Column(u'variable_long_name', VARCHAR(length=255), nullable=False)
    variable_standard_name = Column(u'variable_standard_name', VARCHAR(length=64), nullable=False)
    variable_units = Column(u'variable_units', VARCHAR(length=32), nullable=False)

    #relation definitions
    data_files = relation('DataFile', primaryjoin='VariableAlias.variable_alias_id==DataFileVariable.variable_alias_id', secondary=data_file_variables, secondaryjoin='DataFileVariable.data_file_id==DataFile.data_file_id')


class YCellBound(DeclarativeBase):
    __tablename__ = 'y_cell_bounds'

    __table_args__ = {}

    #column definitions
    bottom_bnd = Column(u'bottom_bnd', REAL())
    grid_id = Column(u'grid_id', INTEGER(), ForeignKey('grids.grid_id'), primary_key=True, nullable=False)
    top_bnd = Column(u'top_bnd', REAL())
    y_center = Column(u'y_center', REAL(), primary_key=True, nullable=False)

    #relation definitions
    grids = relation('Grid', primaryjoin='YCellBound.grid_id==Grid.grid_id')
